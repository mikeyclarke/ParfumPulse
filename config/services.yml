imports:
    - { resource: brand_aliases.yml }
    - { resource: merchants.yml }

# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    max_failed_scrape_days: '%env(int:MAX_FAILED_SCRAPE_DAYS)%'
    asset_integrity_manifest_path: '%kernel.project_dir%/public/build/integrity.json'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: true        # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

        bind:
            $merchantsConfig: '%merchants%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    ParfumPulse\:
        resource: '../src/php/*'
        exclude: '../src/php/{data,DependencyInjection,Session,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class

    ParfumPulse\FrontEnd\Controller\:
        resource: '../src/php/FrontEnd/Controller'
        tags: ['controller.service_arguments']

    ParfumPulse\Asset\AssetIntegrity:
        arguments:
            $manifestPath: '%asset_integrity_manifest_path%'

    ParfumPulse\Brand\BrandNameNormalizer:
        arguments:
            $brandNameAliases: '%brand_name_aliases%'

    ParfumPulse\Scraper\ScraperBot:
        autowire: false

    ParfumPulse\Scraper\ScraperFailuresProcessor:
        arguments:
            $maxFailedScrapeDays: '%max_failed_scrape_days%'

    ParfumPulse\Scraper\ScraperResult:
        autowire: false
